const { SlashCommandBuilder, CommandInteraction, EmbedBuilder } = require('discord.js');
const { getPlayerStats } = require('../../API/pubg');
const { addStatsRoles } = require('../../utils/roles');
const { User } = require('../../schemas/pubg-player');
const { DailyUpdates } = require('../../schemas/daily-update');

let claimedCache = [];

const clearCache = () => {
    claimedCache = []
    setTimeout(clearCache, 1000 * 60 * 60)
};
clearCache();

module.exports = {
    category: 'pubg',
    data: new SlashCommandBuilder()
        .setName('update')
        .setDescription('–û–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ä–æ–ª–∏.'),
    /**
     * 
     * @param {CommandInteraction} interaction 
     */

    async execute(interaction) {
        await interaction.deferReply({ ephemeral: true })
        const { guild, member } = interaction;

        const data = await User.findOne({ discordId: member.id });

        if (!data) {
            return interaction.editReply({ embeds: [new EmbedBuilder().setColor(`#2f3136`).setDescription(`**üö´ –í–∞–º –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥–∏—Å–∫–æ—Ä–¥ —Å –∏–≥—Ä–æ–≤–æ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é**`)] });
        };

        if (claimedCache.includes(member.id)) {
            console.log('from cache bot')
            return interaction.editReply({ content: `**–í—ã —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –æ–±–Ω–æ–≤–ª—è–ª–∏ —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É <t:${parseInt(data.updatedAt / 1000)}:R>**` })
        };

        const obj = {
            guildId: guild.id,
            userId: member.id
        };

        try {

            const results = await DailyUpdates.findOne(obj);

            if (results) {
                const then = new Date(results.updatedAt).getTime()
                const now = new Date().getTime()
                const diffTime = Math.abs(now - then)
                const diffDays = Math.round(diffTime / (1000 * 60 * 60 * 24))

                if (diffDays <= 1) {
                    claimedCache.push(member.id);
                    return interaction.editReply({ content: `**–í—ã —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –æ–±–Ω–æ–≤–ª—è–ª–∏ —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É <t:${parseInt(data.updatedAt / 1000)}:R>**` })
                };
            };

            const newStats = await getPlayerStats(data.pubgNickname);
            switch (newStats) {
                case 'error 429': interaction.editReply({ content: '**–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É.**' }); break;
                case 'error 404': interaction.editReply({ content: `**–ò–≥—Ä–æ–∫ —Å –Ω–∏–∫–æ–º ${player} –Ω–µ –Ω–∞–π–¥–µ–Ω.**` }); break;
                case 'error 400': interaction.editReply({ content: `**–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.**` }); break;
                case 'error unknown': interaction.editReply({ content: `**–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...**` }); break;
                default:

                    await DailyUpdates.findOneAndUpdate(obj, obj, { upsert: true });
                    claimedCache.push(member.id);

                    data.stats = newStats;
                    data.updatedAt = new Date();
                    data.save();

                    await addStatsRoles(member, data.stats)

                    interaction.editReply({ content: `–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.` });
            };

        } catch (err) {
            console.error(err)
        };
    }
};